Loss rate 0%, delay 5 ms, bw 10 KB/s, bt 1000 ms

server 21 2
Node 0: server started, port = 21
SNode 0: time = 1384398900451 msec
Node 0: connection accepted
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
................FNode 0: time = 1384398914461 msec
Node 0: connection closed
Node 0: total bytes received = 100000

*****************************************************************************
General notes: Before "Node 0: time = 1384398900451 msec", we see the server 
node receives the initial SYN packet. Then, because there is no loss in
this example, the receiving socket only receives data packets. Finally, the
receiving socket receives a FIN packet once all data has been read.
*****************************************************************************

Node 1: started
transfer 0 21 40 100000
S:Node 1: time = 1384398900882 msec
Node 1: started
Node 1: bytes to send = 100000
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.............................................................................
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
................::::::::::::::::Node 1: time = 1384398913998
Node 1: sending completed
Node 1: closing connection...
FNode 1: time = 1384398914999 msec
Node 1: connection closed
Node 1: total bytes sent = 100000
Node 1: time elapsed = 14117 msec
Node 1: Bps = 7083.6580009917125


*****************************************************************************
General notes: Before "Node 1: time = 1384398900882 msec", we see the initial
SYN packet sent, followed by the ACK for that SYN packet(:). Then, the sender
alternates between filling its window by sending out data packets (.) and
receiving ACK packets for those data packets sent (:). No retransmission is
needed due to the 0% loss rate. A FIN packet is finally sent to close the
connection (seen before Node 1: time = 1384398914999 msec)
*****************************************************************************


Loss rate 5%, delay 5 ms, bw 10 KB/s, bt 1000 ms

Node 0: started
server 21 2
Node 0: server started, port = 21
SNode 0: time = 1384399468049 msec
Node 0: connection accepted
.............................................................................
..........................................................................!.!
.............................................................................
.............................................................................
.............................................................................
.............................................................................
!............................................................................
......!....................................................................!.
.............................................................................
.............................................................................
.............................................................................
.............................................................................
..........................FNode 0: time = 1384399506056 msec
Node 0: connection closed
Node 0: total bytes received = 100000


*****************************************************************************
General notes: The server begins and ends with receiving a SYN packet and a
FIN packet respectively like before. During data transmission, most packets
are new data packets, however a few are duplicated (.!). This duplication 
could occur for a few reasons. First, the sender might have timed out too
early and retransmitted a packet unnecessarily. Second, it is possible that 
the ACK packet that the receiver sent was lost, and thus the receiver resent
the packet when it timed out.
*****************************************************************************


Node 1: started
transfer 0 21 40 100000
SS!S!:Node 1: time = 1384399468863 msec
Node 1: started
Node 1: bytes to send = 100000
.............................................................................
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::...
..........................................................................:::
:::::::::::???.!?????????.!?????????????????.!???????????????????????:.......
.........????????????????.!:.!:.....................................???????.!
???????????????????????????:......?????.!:.!:................................
..............................?????????.!????????????????????????????????????
????????????:..........????????.!:......?????.!:.............................
..............................?????????????????????????????????????.!????????
?????.!:.!:...................??????????????????.!:.....?????.!:.!:..........
............??????????????.!??????:.!:.......................................
..........................!???????????????????????????????????????????????.!?
????????????:?......?????.!:.!:.!:...........................................
..............................??????????????????.!???????????????????????????
???????????????????.!????:?..................................................
.......................?????????????.!??????????????????????????????.!???????
?????????????:?....????.!:.!:...................................?????????????
?.!??????????????????:.!...:?.!:.!:..............................????????????
?.!?????????????:.!:....................................................?????
??????????.!???????????????????????????:............???????????.!:....?.!??:.
!:......................?????????.!??????.!:.!:...........??????????.!:.!:.!.
.......................................:?????????????????????.!??????????????
?:.!:.....................???????????????????.!:.!:..........................
.................???.!????????????????????????????????:.........?????????.!:.
..........................!??????????????????????????:................???????
?.!??????:.!:Node 1: time = 1384399503023
Node 1: sending completed
Node 1: closing connection...
.!:.!:FNode 1: time = 1384399505024 msec
Node 1: connection closed
Node 1: total bytes sent = 100000
Node 1: time elapsed = 36161 msec
Node 1: Bps = 2765.410248610381


*****************************************************************************
General notes: Initially, the client has to resend its SYN packet twice.
(Each resend is denoted S!). Data transmission starts similarly to before 
(with . for data packets and : for ACK packets that advance the 
acknowledgement field). Later we begin to see large sequences of sent data
packets (.) and large sequences of ACK packets that don't advance the
acknowledgement field (?). This is most likely due to a lost data packet that
causes the recipient to keep sending an ACK requesting the lost data packet.
However, because the window size is nonadjustable in part 1, there are many
outstanding data packets which all receive the duplicate ACK. After the ?
sequence, we see data packet retransmission (.!), which presumably follows a
timeout for the sender. One thing to notice is that after ?'s begin to appear, 
we stop seeing long sequences of :'s, which seems odd at first. However, it 
is important to remember that cumulative ACK's are being used. Over the 
course of a long sequence of ?'s, the receiver is buffering all of the data 
that it receives, so if only a single data packet is lost, once it is 
retransmitted, the receiver will respond with a single ACK that will ACK 
all of the data packets that were previously responded to with the duplicate
ACK's (?'s)
*****************************************************************************

